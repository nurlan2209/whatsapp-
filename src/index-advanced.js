const { default: makeWASocket, DisconnectReason, useMultiFileAuthState } = require('@whiskeysockets/baileys');
const { Boom } = require('@hapi/boom');
const qrcode = require('qrcode-terminal');
const { initGemini, generateGeminiResponse } = require('./providers/gemini');
const config = require('./config').default;
const ContactManager = require('./utils/contact-manager');

let botReadyTimestamp = null;
let contactManager;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
let autoSendingActive = false;
let autoSendingInterval = null;

const start = async () => {
    console.log('üöÄ Starting WhatsApp Advanced Bot...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contactManager = new ContactManager();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys');

    const sock = makeWASocket({
        auth: state,
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥
        if (qr) {
            console.log('\nüì± QR Code for WhatsApp Web:');
            console.log('Copy this text and convert to QR: ' + qr);
            console.log('Or use online QR generator with this text ^\n');
            
            try {
                qrcode.generate(qr, { small: true });
            } catch (e) {
                console.log('QR generation failed, use the text above');
            }
        }
        
        if (connection === 'close') {
            const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
            console.log('Connection closed, reconnecting: ' + shouldReconnect);
            
            if (shouldReconnect) {
                start();
            }
        } else if (connection === 'open') {
            console.log('‚úÖ Connected to WhatsApp!');
            botReadyTimestamp = new Date();
            
            // Initialize Gemini
            try {
                initGemini();
                console.log("‚úì Gemini AI initialized successfully");
            } catch (error) {
                console.log("‚úó Failed to initialize Gemini: " + error.message);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            const stats = contactManager.getStats();
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.contacts.total} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}`);
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sock.ev.on('creds.update', saveCreds);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0];
        
        if (!message.message) return;
        if (message.key.fromMe === true) return;
        
        const messageText = message.message.conversation || 
                           message.message.extendedTextMessage?.text || '';

        if (!messageText) return;

        console.log(`[INCOMING MESSAGE] From ${message.key.remoteJid}: ${messageText}`);

        try {
            // –¢–û–õ–¨–ö–û –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ - –ù–ï–¢ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ò–ò!
            if (messageText.startsWith('!help')) {
                await handlePublicHelp(sock, message);
            }

            // –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ò–ì–ù–û–†–ò–†–£–ï–ú
            
        } catch (error) {
            console.log(`Error handling incoming message: ${error.message}`);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è) - –¢–û–õ–¨–ö–û –î–õ–Ø –°–û–ë–°–¢–í–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
    sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0];
        
        if (!message.message) return;
        if (message.key.fromMe !== true) return; // –¢–û–õ–¨–ö–û —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        const messageText = message.message.conversation || 
                        message.message.extendedTextMessage?.text || '';

        if (!messageText) return;

        console.log(`[OWN MESSAGE] Received: ${messageText}`);

        try {
            // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê–ú–ò (5 –∫–æ–º–∞–Ω–¥) ===
            
            if (messageText.startsWith('!add ')) {
                await handleAddContact(sock, message, messageText);
                return;
            }

            if (messageText.startsWith('!import')) {
                await handleImport(sock, message, messageText);
                return;
            }

            if (messageText === '!scan') {
                await handleScanUploads(sock, message);
                return;
            }

            if (messageText === '!list') {
                await handleListContacts(sock, message);
                return;
            }

            if (messageText === '!validate') {
                await handleValidateContacts(sock, message);
                return;
            }

            // === –†–ê–°–°–´–õ–ö–ê (3 –∫–æ–º–∞–Ω–¥—ã) ===

            if (messageText === '!send') {
                await handleSmartSending(sock, message, config.massMessageText);
                return;
            }

            if (messageText.startsWith('!send ')) {
                await handleSmartSending(sock, message, messageText.replace('!send ', ''));
                return;
            }

            if (messageText === '!clean') {
                await handleCleanProblematic(sock, message);
                return;
            }

            // === –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø (3 –∫–æ–º–∞–Ω–¥—ã) ===

            if (messageText === '!autostart') {
                await handleSimpleAutoSending(sock, message);
                return;
            }

            if (messageText === '!autostop') {
                await handleStopAutoSending(sock, message);
                return;
            }

            if (messageText === '!stats') {
                await handleDetailedStats(sock, message);
                return;
            }

            // === –£–¢–ò–õ–ò–¢–´ (4 –∫–æ–º–∞–Ω–¥—ã) ===

            if (messageText.startsWith('!ai ')) {
                const prompt = messageText.replace('!ai ', '');
                if (prompt.trim()) {
                    await handleAI(sock, message, prompt);
                }
                return;
            }

            if (messageText === '!help') {
                await handleSimpleHelp(sock, message);
                return;
            }

            if (messageText === '!reset') {
                await handleResetSentStatus(sock, message);
                return;
            }

            if (messageText === '!status') {
                await handleQuickStatus(sock, message);
                return;
            }

        } catch (error) {
            console.log(`Error handling own message: ${error.message}`);
        }
    });

};

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ (–¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
const handlePublicHelp = async (sock, message) => {
    const helpText = `
ü§ñ WhatsApp Bot

‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é.
    `;
    await sendReply(sock, message, helpText);
};


const handleAddContact = async (sock, message, text) => {
    const args = text.replace('!add', '').trim().split(',');
    const phone = args[0]?.trim();
    const name = args[1]?.trim();

    if (!phone) {
        await sendReply(sock, message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !add +–Ω–æ–º–µ—Ä[,–∏–º—è]\n–ü—Ä–∏–º–µ—Ä: !add +77012345678,–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤');
        return;
    }

    const result = contactManager.addContact(phone, name);
    await sendReply(sock, message, result.message);
};



const handleImport = async (sock, message, text) => {
    const filePath = text.replace('!import', '').trim();
    
    if (!filePath) {
        await sendReply(sock, message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !import –ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.txt\n–ü—Ä–∏–º–µ—Ä: !import uploads/numbers.txt');
        return;
    }

    const result = contactManager.importFromFile(filePath);
    
    let response = `üìÅ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.added}`;
    
    if (result.errors.length > 0) {
        response += `\n‚ùå –û—à–∏–±–æ–∫: ${result.errors.length}`;
        if (result.errors.length <= 5) {
            response += '\n\n–û—à–∏–±–∫–∏:\n' + result.errors.slice(0, 5).join('\n');
        }
    }

    await sendReply(sock, message, response);
};

const handleScanUploads = async (sock, message) => {
    const files = contactManager.scanUploadsFolder();
    
    if (files.length === 0) {
        await sendReply(sock, message, 'üìÅ –ü–∞–ø–∫–∞ uploads –ø—É—Å—Ç–∞.\n\n–ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ –ø–∞–ø–∫—É uploads/ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !scan');
        return;
    }

    let response = `üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}\n\n`;
    let totalAdded = 0;

    for (const file of files) {
        const result = contactManager.importFromFile(file);
        response += `üìÑ ${file}:\n  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.added}\n  ‚ùå –û—à–∏–±–æ–∫: ${result.errors.length}\n\n`;
        totalAdded += result.added;
    }

    response += `üéâ –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalAdded} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`;
    await sendReply(sock, message, response);
};

const handleListContacts = async (sock, message) => {
    const contacts = contactManager.getAllContacts();
    
    if (contacts.length === 0) {
        await sendReply(sock, message, 'üì± –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç');
        return;
    }

    const stats = contactManager.getStats();
    let response = `üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã (${contacts.length}):\n\n`;
    
    const displayContacts = contacts.slice(0, 20);
    displayContacts.forEach((contact, index) => {
        const status = contact.status === 'active' ? '‚úÖ' : 
                      contact.status === 'blocked' ? '‚ùå' : 
                      contact.status === 'pending' ? '‚è≥' : 
                      contact.status === 'invalid' ? 'üö´' : '‚ùì';
        
        response += `${index + 1}. ${status} ${contact.phone}`;
        if (contact.name) response += ` (${contact.name})`;
        response += '\n';
    });

    if (contacts.length > 20) {
        response += `\n... –∏ –µ—â–µ ${contacts.length - 20} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`;
    }

    response += `\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.contacts.active}\n‚è≥ –û–∂–∏–¥–∞—é—Ç: ${stats.contacts.pending}\nüö´ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${stats.contacts.blocked}`;

    await sendReply(sock, message, response);
};

const handleStats = async (sock, message) => {
    const stats = contactManager.getStats();
    
    const response = `
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üì± –ö–û–ù–¢–ê–ö–¢–´:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.contacts.total}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.contacts.active}
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.contacts.pending}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.contacts.blocked}

üì§ –û–¢–ü–†–ê–í–ö–ê:
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sending.totalSent}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á: ${stats.sending.lastBatch ? new Date(stats.sending.lastBatch).toLocaleString('ru') : '–ù–∏–∫–æ–≥–¥–∞'}

‚öôÔ∏è –õ–ò–ú–ò–¢–´:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞ –±–∞—Ç—á: ${stats.limits.MAX_NUMBERS_PER_BATCH}
‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: ${stats.limits.DAILY_MESSAGE_LIMIT}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: ${stats.limits.MIN_DELAY_BETWEEN_MESSAGES/1000}-${stats.limits.MAX_DELAY_BETWEEN_MESSAGES/1000} —Å–µ–∫
‚Ä¢ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: ${stats.limits.BATCH_COOLDOWN/1000/60} –º–∏–Ω
    `;
    
    await sendReply(sock, message, response);
};

const handleSmartSending = async (sock, message, messageToSend) => {
    const contacts = contactManager.getContactsForSending();
    
    if (contacts.length === 0) {
        await sendReply(sock, message, '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        return;
    }

    const limitCheck = contactManager.canSendMessages(contacts.length);
    if (!limitCheck.canSend) {
        await sendReply(sock, message, `‚ùå ${limitCheck.reason}`);
        return;
    }

    await sendSmartBatch(sock, message, contacts, messageToSend);
};

const handleCleanProblematic = async (sock, message) => {
    const allContacts = contactManager.getAllContacts();
    const beforeCount = allContacts.length;
    
    const invalidCount = allContacts.filter(c => c.status === 'invalid').length;
    const blockedCount = allContacts.filter(c => c.status === 'blocked').length;
    const pendingCount = allContacts.filter(c => c.status === 'pending').length;
    
    const goodContacts = allContacts.filter(contact => contact.status === 'active');
    const removedCount = beforeCount - goodContacts.length;
    
    if (removedCount > 0) {
        contactManager.contacts = goodContacts;
        contactManager.saveContacts();
        
        await sendReply(sock, message, `
üßπ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:

‚ùå –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${removedCount}
   ‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${invalidCount}
   ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${blockedCount}  
   ‚Ä¢ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö: ${pendingCount}

‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${goodContacts.length}

üí° –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ WhatsApp
        `);
    } else {
        await sendReply(sock, message, '‚úÖ –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å');
    }
};

// –£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
const sendSmartBatch = async (sock, message, contacts, messageTemplate) => {
    await sendReply(sock, message, `üöÄ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–∞–º...`);

    let success = 0;
    let errors = 0;

    for (let i = 0; i < contacts.length; i++) {
        const contact = contacts[i];
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
            const checkResult = await sock.onWhatsApp(contact.phone.replace('+', ''));
            if (!checkResult || !Array.isArray(checkResult) || checkResult.length === 0 || !checkResult[0]?.exists) {
                console.log(`‚ùå ${contact.phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp`);
                contactManager.markMessageSent(contact.phone, false);
                errors++;
                continue;
            }

            // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            let personalizedMessage = messageTemplate;
            
            if (contact.name) {
                // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {–ù–∞–∑–≤–∞–Ω–∏–µ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏} –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                personalizedMessage = personalizedMessage.replace(/{–ù–∞–∑–≤–∞–Ω–∏–µ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏}/g, contact.name);
                personalizedMessage = personalizedMessage.replace(/{–Ω–∞–∑–≤–∞–Ω–∏–µ}/g, contact.name);
                personalizedMessage = personalizedMessage.replace(/{–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è}/g, contact.name);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
                personalizedMessage = personalizedMessage.replace(/{–ù–∞–∑–≤–∞–Ω–∏–µ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏}/g, '—É–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–ø–∞–Ω–∏—è');
                personalizedMessage = personalizedMessage.replace(/{–Ω–∞–∑–≤–∞–Ω–∏–µ}/g, '—É–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–ø–∞–Ω–∏—è');
                personalizedMessage = personalizedMessage.replace(/{–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è}/g, '—É–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–ø–∞–Ω–∏—è');
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const jid = contact.phone.replace('+', '') + '@s.whatsapp.net';
            await sock.sendMessage(jid, { text: personalizedMessage });
            
            // –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            contactManager.markMessageSent(contact.phone, true);
            success++;
            
            console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${contact.phone} ‚Üí ${contact.name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);

            // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            if (contacts.length > 5 && (i + 1) % 5 === 0) {
                await sendReply(sock, message, `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${contacts.length} (‚úÖ${success} ‚ùå${errors})`);
            }

            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            const delay = contactManager.getRandomDelay();
            console.log(`‚è±Ô∏è –ü–∞—É–∑–∞ ${delay/1000} —Å–µ–∫—É–Ω–¥...`);
            await new Promise(resolve => setTimeout(resolve, delay));

        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${contact.phone}: ${error.message}`);
            contactManager.markMessageSent(contact.phone, false);
            errors++;
        }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const stats = contactManager.getStats();
    const report = `
üéâ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–ï–ó–£–õ–¨–¢–ê–¢:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}
‚ùå –û—à–∏–±–æ–∫: ${errors}
üì± –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${contacts.length}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ù–Ø:
üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}
üîÑ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sending.totalSent}
    `;
    
    await sendReply(sock, message, report);
};

// –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env
const handleSimpleAutoSending = async (sock, message) => {
    if (autoSendingActive) {
        await sendReply(sock, message, '‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !autostop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
        return;
    }

    const batchSize = parseInt(process.env.MAX_NUMBERS_PER_BATCH || '10');
    const intervalMs = parseInt(process.env.BATCH_COOLDOWN || '900000');
    const intervalMinutes = intervalMs / 1000 / 60;
    const messageText = config.massMessageText;

    const allActiveContacts = contactManager.getAllContacts().filter(c => c.status === 'active');
    const unsentContacts = allActiveContacts.filter(c => !c.lastSent);
    const sentContacts = allActiveContacts.filter(c => c.lastSent);
    
    if (allActiveContacts.length === 0) {
        await sendReply(sock, message, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ !validate');
        return;
    }

    if (unsentContacts.length === 0) {
        await sendReply(sock, message, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–º ${allActiveContacts.length} –∞–∫—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n\nüîÑ –î–ª—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã.`);
        return;
    }

    const stats = contactManager.getStats();
    const remainingDaily = stats.sending.dailyLimit - stats.sending.sentToday;
    
    if (remainingDaily <= 0) {
        await sendReply(sock, message, `‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω (${stats.sending.sentToday}/${stats.sending.dailyLimit}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.`);
        return;
    }

    const contactsToSend = unsentContacts.slice(0, remainingDaily);
    const batches = [];
    for (let i = 0; i < contactsToSend.length; i += batchSize) {
        batches.push(contactsToSend.slice(i, i + batchSize));
    }

    const isResume = sentContacts.length > 0;

    await sendReply(sock, message, `
üöÄ ${isResume ? '–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï' : '–ó–ê–ü–£–°–ö'} –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–ê–°–°–´–õ–ö–ò

üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ê–ö–¢–û–í:
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${allActiveContacts.length}
‚Ä¢ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentContacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${unsentContacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
‚Ä¢ –ö –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–µ–π—á–∞—Å: ${contactsToSend.length} (–ª–∏–º–∏—Ç: ${remainingDaily})

üìä –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–°–´–õ–ö–ò:
‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${batchSize}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMinutes} –º–∏–Ω—É—Ç
‚Ä¢ –í—Å–µ–≥–æ –±–∞—Ç—á–µ–π: ${batches.length}
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ~${Math.ceil(batches.length * intervalMinutes / 60)} —á–∞—Å–æ–≤

‚è∞ –ü–µ—Ä–≤—ã–π –±–∞—Ç—á –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...
–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: !autostop
    `);

    autoSendingActive = true;
    let currentBatch = 0;

    const sendNextBatch = async () => {
        if (!autoSendingActive || currentBatch >= batches.length) {
            autoSendingActive = false;
            if (autoSendingInterval) {
                clearInterval(autoSendingInterval);
                autoSendingInterval = null;
            }
            
            const finalStats = contactManager.getStats();
            const totalSentNow = contactManager.getAllContacts().filter(c => c.lastSent).length;
            
            await sendReply(sock, message, `
üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!

üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: ${currentBatch}/${batches.length}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: ${Math.min(currentBatch * batchSize, contactsToSend.length)}
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º: ${totalSentNow}/${allActiveContacts.length}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${allActiveContacts.length - totalSentNow} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

üìà –õ–ò–ú–ò–¢–´:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${finalStats.sending.sentToday}/${finalStats.sending.dailyLimit}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${finalStats.sending.dailyLimit - finalStats.sending.sentToday}

${allActiveContacts.length - totalSentNow > 0 ? 
  `üîÑ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: !autostart (–∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫–æ–≥–¥–∞ –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è)` : 
  '‚úÖ –í—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'}
            `);
            return;
        }

        const batch = batches[currentBatch];
        console.log(`[AUTO SENDING] –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ ${currentBatch + 1}/${batches.length} (${batch.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)`);
        
        await sendReply(sock, message, `üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ ${currentBatch + 1}/${batches.length} (${batch.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)...`);
        
        try {
            await sendSmartBatch(sock, message, batch, messageText);
            currentBatch++;
            
            const remainingBatches = batches.length - currentBatch;
            
            if (currentBatch < batches.length) {
                await sendReply(sock, message, `‚úÖ –ë–∞—Ç—á ${currentBatch}/${batches.length} –∑–∞–≤–µ—Ä—à–µ–Ω.\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –±–∞—Ç—á–µ–π: ${remainingBatches}\n‚è∞ –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ ${intervalMinutes} –º–∏–Ω—É—Ç.`);
            }
        } catch (error) {
            console.log(`[AUTO SENDING] –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${currentBatch + 1}: ${error.message}`);
            await sendReply(sock, message, `‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${currentBatch + 1}: ${error.message}`);
        }
    };

    setTimeout(async () => {
        await sendNextBatch();
        
        if (batches.length > 1) {
            autoSendingInterval = setInterval(sendNextBatch, intervalMs);
        }
    }, 10000);
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
const handleStopAutoSending = async (sock, message) => {
    if (!autoSendingActive) {
        await sendReply(sock, message, '‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
        return;
    }

    autoSendingActive = false;
    if (autoSendingInterval) {
        clearInterval(autoSendingInterval);
        autoSendingInterval = null;
    }

    await sendReply(sock, message, 'üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê');
};

const handleDetailedStats = async (sock, message) => {
    const stats = contactManager.getStats();
    const allContacts = contactManager.getAllContacts();
    const sentContacts = allContacts.filter(c => c.lastSent);
    const unsentContacts = allContacts.filter(c => !c.lastSent && c.status === 'active');
    
    const response = `
üìä –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üì± –ö–û–ù–¢–ê–ö–¢–´:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.contacts.total}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.contacts.active}
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${stats.contacts.blocked + stats.contacts.pending}

üì§ –†–ê–°–°–´–õ–ö–ê:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sending.totalSent}
‚Ä¢ –û—Å—Ç–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç–∞: ${stats.sending.dailyLimit - stats.sending.sentToday}

üéØ –ü–†–û–ì–†–ï–°–°:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${sentContacts.length}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${unsentContacts.length}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${stats.contacts.active > 0 ? Math.round((sentContacts.length / stats.contacts.active) * 100) : 0}%

‚öôÔ∏è –õ–ò–ú–ò–¢–´:
‚Ä¢ –ë–∞—Ç—á: ${stats.limits.MAX_NUMBERS_PER_BATCH}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: ${stats.limits.MIN_DELAY_BETWEEN_MESSAGES/1000}-${stats.limits.MAX_DELAY_BETWEEN_MESSAGES/1000} —Å–µ–∫
‚Ä¢ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: ${stats.limits.BATCH_COOLDOWN/1000/60} –º–∏–Ω

ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ê–°–°–´–õ–ö–ê: ${autoSendingActive ? 'üü¢ –ê–ö–¢–ò–í–ù–ê' : 'üî¥ –ù–ï–ê–ö–¢–ò–í–ù–ê'}

üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á: ${stats.sending.lastBatch ? new Date(stats.sending.lastBatch).toLocaleString('ru') : '–ù–∏–∫–æ–≥–¥–∞'}
    `;
    
    await sendReply(sock, message, response);
};

const handleQuickStatus = async (sock, message) => {
    const stats = contactManager.getStats();
    const allContacts = contactManager.getAllContacts();
    const unsentContacts = allContacts.filter(c => !c.lastSent && c.status === 'active');
    
    const response = `
‚ö° –ë–´–°–¢–†–´–ô –°–¢–ê–¢–£–°:

üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${stats.contacts.active}
üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${unsentContacts.length}
ü§ñ –ê–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞: ${autoSendingActive ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

${unsentContacts.length > 0 ? 'üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: !autostart' : '‚úÖ –í—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'}
    `;
    
    await sendReply(sock, message, response);
};

const handleValidateContacts = async (sock, message) => {
    const allContacts = contactManager.getAllContacts();
    
    if (allContacts.length === 0) {
        await sendReply(sock, message, '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
        return;
    }

    await sendReply(sock, message, `üîç –í–∞–ª–∏–¥–∏—Ä—É—é ${allContacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...`);
    
    let validNumbers = 0;
    let invalidNumbers = 0;
    let whatsappChecked = 0;
    let whatsappValid = 0;
    let whatsappInvalid = 0;
    
    for (let i = 0; i < allContacts.length; i++) {
        const contact = allContacts[i];
        
        if (!contactManager.isValidMobileNumber(contact.phone)) {
            invalidNumbers++;
            contact.status = 'invalid';
            continue;
        }
        
        validNumbers++;
        
        try {
            const checkResult = await sock.onWhatsApp(contact.phone.replace('+', ''));
            if (checkResult && Array.isArray(checkResult) && checkResult.length > 0 && checkResult[0]?.exists) {
                whatsappValid++;
                contact.status = 'active';
            } else {
                whatsappInvalid++;
                contact.status = 'invalid';
            }
            whatsappChecked++;
            
            if (whatsappChecked % 10 === 0) {
                await sendReply(sock, message, `‚è≥ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${whatsappChecked}/${allContacts.length} (‚úÖ${whatsappValid} ‚ùå${whatsappInvalid})`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 2000));
            
        } catch (error) {
            whatsappInvalid++;
            whatsappChecked++;
            contact.status = 'invalid';
            
            if (error.message.includes('rate') || error.message.includes('limit')) {
                await sendReply(sock, message, '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, —É–≤–µ–ª–∏—á–∏–≤–∞—é –ø–∞—É–∑—É...');
                await new Promise(resolve => setTimeout(resolve, 10000));
            }
        }
    }

    contactManager.saveContacts();

    const report = `
üìä –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:

üì± –§–û–†–ú–ê–¢ –ù–û–ú–ï–†–û–í:
‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: ${validNumbers}
‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${invalidNumbers}

üí¨ –ü–†–û–í–ï–†–ö–ê WHATSAPP:
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${whatsappValid}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${whatsappInvalid}

üìà –ò–¢–û–ì–û:
–ì–æ—Ç–æ–≤—ã—Ö –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: ${whatsappValid} –∏–∑ ${allContacts.length}
–ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: ${Math.round((whatsappValid / allContacts.length) * 100)}%

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !clean –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    `;
    
    await sendReply(sock, message, report);
};

const handleAI = async (sock, message, prompt) => {
    try {
        console.log(`[AI] Processing: ${prompt}`);
        
        const response = await generateGeminiResponse(prompt, message.key.remoteJid || 'unknown');
        await sendReply(sock, message, response);
        
        console.log(`[AI] Response sent: ${response.substring(0, 100)}...`);
    } catch (error) {
        console.log(`[AI] Error: ${error.message}`);
        await sendReply(sock, message, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message);
    }
};

const handleSimpleHelp = async (sock, message) => {
    const helpText = `
ü§ñ WhatsApp –ë–æ—Ç –¥–ª—è –†–∞—Å—Å—ã–ª–∫–∏

üì± –ö–û–ù–¢–ê–ö–¢–´:
!add +–Ω–æ–º–µ—Ä[,–∏–º—è] - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
!import —Ñ–∞–π–ª.txt - –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞
!scan - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å uploads/
!list - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
!validate - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞

üì§ –†–ê–°–°–´–õ–ö–ê:
!send - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
!send –í–ê–® –¢–ï–ö–°–¢ - –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
!clean - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã

ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø:
!autostart - –£–º–Ω–∞—è –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞
!autostop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
!stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üîß –£–¢–ò–õ–ò–¢–´:
!ai –≤–æ–ø—Ä–æ—Å - –û–±—â–µ–Ω–∏–µ —Å AI
!reset - –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
!status - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
!help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –ü–†–ò–ú–ï–†–´:
!scan ‚Üí !validate ‚Üí !autostart
!send –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥–∏
!status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

‚ö° –õ–ò–ú–ò–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
‚Ä¢ 10 –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ –±–∞—Ç—á
‚Ä¢ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å  
‚Ä¢ 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ 5-10 —Å–µ–∫
    `;
    await sendReply(sock, message, helpText);
};

const handleResetSentStatus = async (sock, message) => {
    const allContacts = contactManager.getAllContacts();
    let resetCount = 0;
    
    allContacts.forEach(contact => {
        if (contact.lastSent) {
            contact.sentCount = 0;
            delete contact.lastSent;
            resetCount++;
        }
    });
    
    contactManager.saveContacts();
    
    await sendReply(sock, message, `
üîÑ –°–ë–†–û–° –°–¢–ê–¢–£–°–ê –û–¢–ü–†–ê–í–ö–ò:

üì± –°–±—Ä–æ—à–µ–Ω–æ —É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${resetCount}
üìä –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${allContacts.length}

‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ!
üöÄ –ò—Å–ø–æ–ª—å–∑—É–π: !autostart
    `);
};


const sendReply = async (sock, message, text) => {
    try {
        await sock.sendMessage(message.key.remoteJid, { text });
    } catch (error) {
        console.log(`Failed to send reply: ${error.message}`);
    }
};

start().catch(error => {
    console.log(`Failed to start bot: ${error.message}`);
    process.exit(1);
});

module.exports = { botReadyTimestamp };