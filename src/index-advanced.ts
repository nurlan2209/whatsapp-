import makeWASocket, { DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys'
import { Boom } from '@hapi/boom'
import qrcode from 'qrcode-terminal'
import * as cli from "./cli/ui";
import { initGemini, generateGeminiResponse } from "./providers/gemini";
import config from "./config";
import ContactManager from './utils/contact-manager';

let botReadyTimestamp: Date | null = null;
let contactManager: ContactManager;

const start = async () => {
    cli.printIntro();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contactManager = new ContactManager();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys')

    const sock = makeWASocket({
        auth: state,
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥
        if (qr) {
            console.log('\nüì± QR Code for WhatsApp Web:')
            console.log('Copy this text and convert to QR: ' + qr)
            console.log('Or use online QR generator with this text ^\n')
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å QR –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            try {
                qrcode.generate(qr, { small: true })
            } catch (e) {
                console.log('QR generation failed, use the text above')
            }
        }
        
        if(connection === 'close') {
            const shouldReconnect = (lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut
            cli.printError('Connection closed due to ' + lastDisconnect?.error + ', reconnecting: ' + shouldReconnect)
            
            if(shouldReconnect) {
                start()
            }
        } else if(connection === 'open') {
            cli.printAuthenticated()
            cli.printOutro()
            botReadyTimestamp = new Date()
            
            // Initialize Gemini
            try {
                initGemini();
                cli.print("‚úì Gemini AI initialized successfully");
            } catch (error: any) {
                cli.printError("‚úó Failed to initialize Gemini: " + error.message);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            const stats = contactManager.getStats();
            cli.print(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.contacts.total} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}`);
        }
    })

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sock.ev.on('creds.update', saveCreds)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0]
        
        if (!message.message) return
        if (message.key.fromMe === true) return
        
        const messageText = message.message.conversation || 
                           message.message.extendedTextMessage?.text || ''

        if (!messageText) return

        cli.print(`[INCOMING MESSAGE] From ${message.key.remoteJid}: ${messageText}`)

        try {
            // AI –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (messageText.startsWith('!ai') || messageText.startsWith('!gpt')) {
                const prompt = messageText.replace(/^!(ai|gpt)\s*/, '')
                if (prompt.trim()) {
                    await handleAI(sock, message, prompt)
                }
                return
            }

            if (messageText.startsWith('!help')) {
                await handleHelp(sock, message)
                return
            }

        } catch (error: any) {
            cli.printError(`Error handling incoming message: ${error.message}`)
        }
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0]
        
        if (!message.message) return
        if (message.key.fromMe !== true) return
        
        const messageText = message.message.conversation || 
                           message.message.extendedTextMessage?.text || ''

        if (!messageText) return

        cli.print(`[OWN MESSAGE] Received: ${messageText}`)

        try {
            // === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–¢–ê–ö–¢–ê–ú–ò ===
            
            if (messageText.startsWith('!add ')) {
                await handleAddContact(sock, message, messageText)
                return
            }

            if (messageText.startsWith('!import')) {
                await handleImport(sock, message, messageText)
                return
            }

            if (messageText.startsWith('!scan')) {
                await handleScanUploads(sock, message)
                return
            }

            if (messageText.startsWith('!list')) {
                await handleListContacts(sock, message)
                return
            }

            if (messageText.startsWith('!stats')) {
                await handleStats(sock, message)
                return
            }

            if (messageText.startsWith('!clean')) {
                await handleClean(sock, message)
                return
            }

            if (messageText.startsWith('!check')) {
                await handleCheckContacts(sock, message)
                return
            }

            // === –ö–û–ú–ê–ù–î–´ –†–ê–°–°–´–õ–ö–ò ===

            if (messageText.startsWith('!send ')) {
                await handleSmartSending(sock, message, messageText)
                return
            }

            if (messageText.startsWith('!batch ')) {
                await handleBatchSending(sock, message, messageText)
                return
            }

            // === AI –ö–û–ú–ê–ù–î–´ ===

            if (messageText.startsWith('!ai') || messageText.startsWith('!gpt')) {
                const prompt = messageText.replace(/^!(ai|gpt)\s*/, '')
                if (prompt.trim()) {
                    await handleAI(sock, message, prompt)
                }
                return
            }

            if (messageText.startsWith('!help')) {
                await handleAdvancedHelp(sock, message)
                return
            }

        } catch (error: any) {
            cli.printError(`Error handling own message: ${error.message}`)
        }
    })
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

const handleAddContact = async (sock: any, message: any, text: string) => {
    const args = text.replace('!add', '').trim().split(',')
    const phone = args[0]?.trim()
    const name = args[1]?.trim()

    if (!phone) {
        await sendReply(sock, message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !add +–Ω–æ–º–µ—Ä[,–∏–º—è]\n–ü—Ä–∏–º–µ—Ä: !add +77012345678,–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤')
        return
    }

    const result = contactManager.addContact(phone, name)
    await sendReply(sock, message, result.message)
}

const handleImport = async (sock: any, message: any, text: string) => {
    const filePath = text.replace('!import', '').trim()
    
    if (!filePath) {
        await sendReply(sock, message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !import –ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.txt\n–ü—Ä–∏–º–µ—Ä: !import uploads/numbers.txt')
        return
    }

    const result = contactManager.importFromFile(filePath)
    
    let response = `üìÅ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.added}`
    
    if (result.errors.length > 0) {
        response += `\n‚ùå –û—à–∏–±–æ–∫: ${result.errors.length}`
        if (result.errors.length <= 5) {
            response += '\n\n–û—à–∏–±–∫–∏:\n' + result.errors.slice(0, 5).join('\n')
        }
    }

    await sendReply(sock, message, response)
}

const handleScanUploads = async (sock: any, message: any) => {
    const files = contactManager.scanUploadsFolder()
    
    if (files.length === 0) {
        await sendReply(sock, message, 'üìÅ –ü–∞–ø–∫–∞ uploads –ø—É—Å—Ç–∞.\n\n–ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ –ø–∞–ø–∫—É uploads/ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !scan')
        return
    }

    let response = `üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}\n\n`
    let totalAdded = 0

    for (const file of files) {
        const result = contactManager.importFromFile(file)
        response += `üìÑ ${file}:\n  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.added}\n  ‚ùå –û—à–∏–±–æ–∫: ${result.errors.length}\n\n`
        totalAdded += result.added
    }

    response += `üéâ –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalAdded} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`
    await sendReply(sock, message, response)
}

const handleListContacts = async (sock: any, message: any) => {
    const contacts = contactManager.getAllContacts()
    
    if (contacts.length === 0) {
        await sendReply(sock, message, 'üì± –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç')
        return
    }

    const stats = contactManager.getStats()
    let response = `üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã (${contacts.length}):\n\n`
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const displayContacts = contacts.slice(0, 20)
    displayContacts.forEach((contact, index) => {
        const status = contact.status === 'active' ? '‚úÖ' : 
                      contact.status === 'blocked' ? '‚ùå' : 
                      contact.status === 'pending' ? '‚è≥' : '‚ùì'
        
        response += `${index + 1}. ${status} ${contact.phone}`
        if (contact.name) response += ` (${contact.name})`
        if (contact.source) response += ` [${contact.source}]`
        response += '\n'
    })

    if (contacts.length > 20) {
        response += `\n... –∏ –µ—â–µ ${contacts.length - 20} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`
    }

    response += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.contacts.active}\n‚è≥ –û–∂–∏–¥–∞—é—Ç: ${stats.contacts.pending}\n‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.contacts.blocked}`

    await sendReply(sock, message, response)
}

const handleStats = async (sock: any, message: any) => {
    const stats = contactManager.getStats()
    
    const response = `
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üì± –ö–û–ù–¢–ê–ö–¢–´:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.contacts.total}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.contacts.active}
‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.contacts.pending}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.contacts.blocked}

üì§ –û–¢–ü–†–ê–í–ö–ê:
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sending.totalSent}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á: ${stats.sending.lastBatch ? new Date(stats.sending.lastBatch).toLocaleString('ru') : '–ù–∏–∫–æ–≥–¥–∞'}

‚öôÔ∏è –õ–ò–ú–ò–¢–´:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞ –±–∞—Ç—á: ${stats.limits.MAX_NUMBERS_PER_BATCH}
‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: ${stats.limits.DAILY_MESSAGE_LIMIT}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: ${stats.limits.MIN_DELAY_BETWEEN_MESSAGES/1000}-${stats.limits.MAX_DELAY_BETWEEN_MESSAGES/1000} —Å–µ–∫
‚Ä¢ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: ${stats.limits.BATCH_COOLDOWN/1000/60} –º–∏–Ω
    `
    
    await sendReply(sock, message, response)
}

const handleClean = async (sock: any, message: any) => {
    const removed = contactManager.cleanBlockedContacts()
    await sendReply(sock, message, `üßπ –£–¥–∞–ª–µ–Ω–æ ${removed} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`)
}

const handleCheckContacts = async (sock: any, message: any) => {
    const contacts = contactManager.getContactsForSending(10) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10
    
    if (contacts.length === 0) {
        await sendReply(sock, message, '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
        return
    }

    await sendReply(sock, message, `üîç –ü—Ä–æ–≤–µ—Ä—è—é ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...`)
    
    let valid = 0
    let invalid = 0
    const results: string[] = []

    for (const contact of contacts) {
        try {
            const [result] = await sock.onWhatsApp(contact.phone.replace('+', ''))
            
            if (result && result.exists) {
                results.push(`‚úÖ ${contact.phone}${contact.name ? ` (${contact.name})` : ''}`)
                valid++
                contactManager.markMessageSent(contact.phone, true) // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
            } else {
                results.push(`‚ùå ${contact.phone} - –Ω–µ –Ω–∞–π–¥–µ–Ω`)
                invalid++
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000))
            
        } catch (error: any) {
            results.push(`‚ö†Ô∏è ${contact.phone} - –æ—à–∏–±–∫–∞`)
            invalid++
        }
    }

    const report = `üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n${results.join('\n')}\n\nüìä –ò—Ç–æ–≥–æ:\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${valid}\n‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${invalid}`
    await sendReply(sock, message, report)
}

const handleSmartSending = async (sock: any, message: any, text: string) => {
    const messageToSend = text.replace('!send', '').trim()
    
    if (!messageToSend) {
        await sendReply(sock, message, '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: !send –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–≤–æ–∏ —É—Å–ª—É–≥–∏')
        return
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É–º–Ω—ã–π –±–∞—Ç—á
    const contacts = contactManager.getContactsForSending()
    
    if (contacts.length === 0) {
        await sendReply(sock, message, '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        return
    }

    const limitCheck = contactManager.canSendMessages(contacts.length)
    if (!limitCheck.canSend) {
        await sendReply(sock, message, `‚ùå ${limitCheck.reason}`)
        return
    }

    await sendSmartBatch(sock, message, contacts, messageToSend)
}

const handleBatchSending = async (sock: any, message: any, text: string) => {
    const args = text.replace('!batch', '').trim().split(' ')
    const batchSize = parseInt(args[0]) || 10
    const messageToSend = args.slice(1).join(' ')

    if (!messageToSend) {
        await sendReply(sock, message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !batch –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: !batch 15 –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥–∏')
        return
    }

    const contacts = contactManager.getContactsForSending(batchSize)
    
    if (contacts.length === 0) {
        await sendReply(sock, message, '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        return
    }

    const limitCheck = contactManager.canSendMessages(contacts.length)
    if (!limitCheck.canSend) {
        await sendReply(sock, message, `‚ùå ${limitCheck.reason}`)
        return
    }

    await sendSmartBatch(sock, message, contacts, messageToSend)
}

// –£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞
const sendSmartBatch = async (sock: any, message: any, contacts: any[], messageText: string) => {
    await sendReply(sock, message, `üöÄ –ù–∞—á–∏–Ω–∞—é —É–º–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–∞–º...`)

    let success = 0
    let errors = 0

    for (let i = 0; i < contacts.length; i++) {
        const contact = contacts[i]
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
            const [result] = await sock.onWhatsApp(contact.phone.replace('+', ''))
            if (!result || !result.exists) {
                cli.printError(`‚ùå ${contact.phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp`)
                contactManager.markMessageSent(contact.phone, false)
                errors++
                continue
            }

            // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            let personalizedMessage = messageText
            if (contact.name) {
                personalizedMessage = `${contact.name}, ${messageText}`
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const jid = contact.phone.replace('+', '') + '@s.whatsapp.net'
            await sock.sendMessage(jid, { text: personalizedMessage })
            
            // –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            contactManager.markMessageSent(contact.phone, true)
            success++
            
            cli.print(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${contact.phone}${contact.name ? ` (${contact.name})` : ''}`)

            // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
            if (contacts.length > 5 && (i + 1) % 5 === 0) {
                await sendReply(sock, message, `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${contacts.length} (‚úÖ${success} ‚ùå${errors})`)
            }

            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            const delay = contactManager.getRandomDelay()
            cli.print(`‚è±Ô∏è –ü–∞—É–∑–∞ ${delay/1000} —Å–µ–∫—É–Ω–¥...`)
            await new Promise(resolve => setTimeout(resolve, delay))

        } catch (error: any) {
            cli.printError(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${contact.phone}: ${error.message}`)
            contactManager.markMessageSent(contact.phone, false)
            errors++
        }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const stats = contactManager.getStats()
    const report = `
üéâ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–ï–ó–£–õ–¨–¢–ê–¢:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}
‚ùå –û—à–∏–±–æ–∫: ${errors}
üì± –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${contacts.length}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ù–Ø:
üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.sending.sentToday}/${stats.sending.dailyLimit}
üîÑ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sending.totalSent}

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: ${Math.ceil(stats.limits.BATCH_COOLDOWN/1000/60)} –º–∏–Ω—É—Ç
    `
    
    await sendReply(sock, message, report)
}

const handleAI = async (sock: any, message: any, prompt: string) => {
    try {
        cli.print(`[AI] Processing: ${prompt}`)
        
        const response = await generateGeminiResponse(prompt, message.key.remoteJid || 'unknown')
        await sendReply(sock, message, response)
        
        cli.print(`[AI] Response sent: ${response.substring(0, 100)}...`)
    } catch (error: any) {
        cli.printError(`[AI] Error: ${error.message}`)
        await sendReply(sock, message, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message)
    }
}

const handleAdvancedHelp = async (sock: any, message: any) => {
    const helpText = `
ü§ñ WhatsApp –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –ë–æ—Ç

üì± –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê–ú–ò:
!add +–Ω–æ–º–µ—Ä[,–∏–º—è] - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
!import –ø—É—Ç—å/—Ñ–∞–π–ª.txt - –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞
!scan - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É uploads/
!list - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
!check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ WhatsApp
!clean - –£–¥–∞–ª–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
!stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üì§ –£–ú–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê:
!send —Ç–µ–∫—Å—Ç - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ç—á
!batch 15 —Ç–µ–∫—Å—Ç - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞

ü§ñ AI –ê–°–°–ò–°–¢–ï–ù–¢:
!ai –≤–æ–ø—Ä–æ—Å - –û–±—â–µ–Ω–∏–µ —Å Gemini
!gpt –≤–æ–ø—Ä–æ—Å - –¢–æ –∂–µ —Å–∞–º–æ–µ

üìã –ü–†–ò–ú–ï–†–´:
!add +77012345678,–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
!import uploads/clients.txt
!scan
!batch 10 üî• –°–∫–∏–¥–∫–∞ 50%! –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!

üìÅ –§–û–†–ú–ê–¢–´ –§–ê–ô–õ–û–í:
+77012345678
+77012345678,–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞
77012345678;–ò–º—è –§–∞–º–∏–ª–∏—è

‚ö° –õ–ò–ú–ò–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 20 –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑
‚Ä¢ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å  
‚Ä¢ –ü–∞—É–∑–∞ 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ 5-10 —Å–µ–∫
    `
    await sendReply(sock, message, helpText)
}

const handleHelp = async (sock: any, message: any) => {
    const helpText = `
ü§ñ WhatsApp AI Bot

ü§ñ AI –ö–û–ú–ê–ù–î–´:
!ai –≤–æ–ø—Ä–æ—Å - –û–±—â–µ–Ω–∏–µ —Å –ò–ò
!help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–±–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
    `
    await sendReply(sock, message, helpText)
}

const sendReply = async (sock: any, message: any, text: string) => {
    try {
        await sock.sendMessage(message.key.remoteJid, { text })
    } catch (error: any) {
        cli.printError(`Failed to send reply: ${error.message}`)
    }
}

start().catch(error => {
    cli.printError(`Failed to start bot: ${error.message}`)
    process.exit(1)
})

export { botReadyTimestamp }