import makeWASocket, { DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys'
import { Boom } from '@hapi/boom'
import qrcode from 'qrcode-terminal'
import * as cli from "./cli/ui";
import { initGemini, generateGeminiResponse } from "./providers/gemini";
import config from "./config";

let botReadyTimestamp: Date | null = null;

const start = async () => {
    cli.printIntro();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys')

    const sock = makeWASocket({
        auth: state,
        // –£–±–∏—Ä–∞–µ–º printQRInTerminal, –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∞–º–∏
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥
        if (qr) {
            console.log('\nüì± QR Code for WhatsApp Web:')
            console.log('Copy this text and convert to QR: ' + qr)
            console.log('Or use online QR generator with this text ^\n')
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å QR –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            try {
                qrcode.generate(qr, { small: true })
            } catch (e) {
                console.log('QR generation failed, use the text above')
            }
        }
        
        if(connection === 'close') {
            const shouldReconnect = (lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut
            cli.printError('Connection closed due to ' + lastDisconnect?.error + ', reconnecting: ' + shouldReconnect)
            
            if(shouldReconnect) {
                start()
            }
        } else if(connection === 'open') {
            cli.printAuthenticated()
            cli.printOutro()
            botReadyTimestamp = new Date()
            
            // Initialize Gemini
            try {
                initGemini();
                cli.print("‚úì Gemini AI initialized successfully");
            } catch (error: any) {
                cli.printError("‚úó Failed to initialize Gemini: " + error.message);
            }
        }
    })

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sock.ev.on('creds.update', saveCreds)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0]
        
        if (!message.message) return
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–ï –æ—Ç –±–æ—Ç–∞)
        if (message.key.fromMe === true) return
        
        const messageText = message.message.conversation || 
                           message.message.extendedTextMessage?.text || ''

        if (!messageText) return

        cli.print(`[INCOMING MESSAGE] From ${message.key.remoteJid}: ${messageText}`)

        try {
            // AI –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (messageText.startsWith('!ai') || messageText.startsWith('!gpt')) {
                const prompt = messageText.replace(/^!(ai|gpt)\s*/, '')
                if (prompt.trim()) {
                    await handleAI(sock, message, prompt)
                }
                return
            }

            if (messageText.startsWith('!help')) {
                await handleHelp(sock, message)
                return
            }

            // –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É (–≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)

        } catch (error: any) {
            cli.printError(`Error handling incoming message: ${error.message}`)
        }
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–û–ë–°–¢–í–ï–ù–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0]
        
        if (!message.message) return
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –°–í–û–ò —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.key.fromMe !== true) return
        
        const messageText = message.message.conversation || 
                           message.message.extendedTextMessage?.text || ''

        if (!messageText) return

        cli.print(`[OWN MESSAGE] Received: ${messageText}`)

        try {
            // –ö–æ–º–∞–Ω–¥—ã –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
            if (messageText.startsWith('!send')) {
                await handleMassMessage(sock, message, messageText)
                return
            }

            if (messageText.startsWith('!add')) {
                await handleAddNumber(sock, message, messageText)
                return
            }

            if (messageText.startsWith('!check')) {
                await handleCheckNumbers(sock, message)
                return
            }

            if (messageText.startsWith('!help')) {
                await handleHelp(sock, message)
                return
            }

            // AI –∫–æ–º–∞–Ω–¥—ã
            if (messageText.startsWith('!ai') || messageText.startsWith('!gpt')) {
                const prompt = messageText.replace(/^!(ai|gpt)\s*/, '')
                if (prompt.trim()) {
                    await handleAI(sock, message, prompt)
                }
                return
            }

        } catch (error: any) {
            cli.printError(`Error handling own message: ${error.message}`)
        }
    })
}

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏
let phoneNumbers: string[] = []

const handleMassMessage = async (sock: any, message: any, text: string) => {
    const messageToSend = text.replace('!send', '').trim() || '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–µ–≥–æ –±–æ—Ç–∞.'
    
    if (phoneNumbers.length === 0) {
        await sendReply(sock, message, '–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π !add')
        return
    }

    await sendReply(sock, message, `–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ ${phoneNumbers.length} –Ω–æ–º–µ—Ä–∞–º...`)

    let success = 0
    let errors = 0

    for (const phone of phoneNumbers) {
        try {
            // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
            let formattedNumber = phone.replace(/[^\d+]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
            
            // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
            if (formattedNumber.startsWith('8')) {
                formattedNumber = '+7' + formattedNumber.substring(1)
            }
            
            // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º +
            if (!formattedNumber.startsWith('+')) {
                formattedNumber = '+' + formattedNumber
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º @s.whatsapp.net –¥–ª—è WhatsApp ID
            const jid = formattedNumber.replace('+', '') + '@s.whatsapp.net'
            
            cli.print(`Trying to send to: ${formattedNumber} (${jid})`)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ WhatsApp
            const [result] = await sock.onWhatsApp(formattedNumber.replace('+', ''))
            if (!result || !result.exists) {
                cli.printError(`Number ${formattedNumber} is not registered on WhatsApp`)
                errors++
                continue
            }
            
            await sock.sendMessage(jid, { text: messageToSend })
            success++
            cli.print(`‚úì Sent to ${formattedNumber}`)
            
            // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 5000)) // 5 —Å–µ–∫—É–Ω–¥
            
        } catch (error: any) {
            errors++
            cli.printError(`‚úó Failed to send to ${phone}: ${error.message}`)
        }
    }

    await sendReply(sock, message, `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}\n‚ùå –û—à–∏–±–æ–∫: ${errors}`)
}

const handleAddNumber = async (sock: any, message: any, text: string) => {
    const phone = text.replace('!add', '').trim()
    
    if (!phone) {
        await sendReply(sock, message, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: !add +77012345678')
        return
    }

    const cleanPhone = phone.replace(/[^\d+]/g, '')
    
    if (!phoneNumbers.includes(cleanPhone)) {
        phoneNumbers.push(cleanPhone)
        await sendReply(sock, message, `–ù–æ–º–µ—Ä ${cleanPhone} –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: ${phoneNumbers.length}`)
    } else {
        await sendReply(sock, message, `–ù–æ–º–µ—Ä ${cleanPhone} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ`)
    }
}

const handleCheckNumbers = async (sock: any, message: any) => {
    if (phoneNumbers.length === 0) {
        await sendReply(sock, message, '–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç')
        return
    }

    await sendReply(sock, message, `–ü—Ä–æ–≤–µ—Ä—è—é ${phoneNumbers.length} –Ω–æ–º–µ—Ä–æ–≤...`)
    
    let valid = 0
    let invalid = 0
    const results = []

    for (const phone of phoneNumbers) {
        try {
            let formattedNumber = phone.replace(/[^\d+]/g, '')
            
            if (formattedNumber.startsWith('8')) {
                formattedNumber = '+7' + formattedNumber.substring(1)
            }
            
            if (!formattedNumber.startsWith('+')) {
                formattedNumber = '+' + formattedNumber
            }
            
            const [result] = await sock.onWhatsApp(formattedNumber.replace('+', ''))
            
            if (result && result.exists) {
                results.push(`‚úÖ ${formattedNumber} - –∞–∫—Ç–∏–≤–µ–Ω`)
                valid++
            } else {
                results.push(`‚ùå ${formattedNumber} - –Ω–µ –Ω–∞–π–¥–µ–Ω`)
                invalid++
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000)) // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            
        } catch (error: any) {
            results.push(`‚ö†Ô∏è ${phone} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`)
            invalid++
        }
    }

    const report = `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n${results.join('\n')}\n\nüìä –ò—Ç–æ–≥–æ:\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${valid}\n‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${invalid}`
    await sendReply(sock, message, report)
}

const handleHelp = async (sock: any, message: any) => {
    const helpText = `
ü§ñ WhatsApp Gemini Bot

üì§ –†–ê–°–°–´–õ–ö–ê:
!send —Ç–µ–∫—Å—Ç - –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
!add +–Ω–æ–º–µ—Ä - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä
!list - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä–∞
!check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä–∞

ü§ñ AI:
!ai –≤–æ–ø—Ä–æ—Å - –û–±—â–µ–Ω–∏–µ —Å Gemini
!gpt –≤–æ–ø—Ä–æ—Å - –¢–æ –∂–µ —Å–∞–º–æ–µ

üìã –ü–†–ò–ú–ï–†–´:
!add +77012345678
!check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞
!send –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–≤–æ–∏ —É—Å–ª—É–≥–∏
!ai –ù–∞–ø–∏—à–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç
    `
    await sendReply(sock, message, helpText)
}

const handleAI = async (sock: any, message: any, prompt: string) => {
    try {
        cli.print(`[AI] Processing: ${prompt}`)
        
        const response = await generateGeminiResponse(prompt, message.key.remoteJid || 'unknown')
        await sendReply(sock, message, response)
        
        cli.print(`[AI] Response sent: ${response.substring(0, 100)}...`)
    } catch (error: any) {
        cli.printError(`[AI] Error: ${error.message}`)
        await sendReply(sock, message, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message)
    }
}

const sendReply = async (sock: any, message: any, text: string) => {
    try {
        await sock.sendMessage(message.key.remoteJid, { text })
    } catch (error: any) {
        cli.printError(`Failed to send reply: ${error.message}`)
    }
}

start().catch(error => {
    cli.printError(`Failed to start bot: ${error.message}`)
    process.exit(1)
})

export { botReadyTimestamp }