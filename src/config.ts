import process from "process";
import { TranscriptionMode } from "./types/transcription-mode";
import { TTSMode } from "./types/tts-mode";

// Environment variables
import dotenv from "dotenv";
dotenv.config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
function processMessageText(text: string): string {
	if (!text) return "";
	// –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
	return text.replace(/\\n/g, '\n');
}

// Config Interface
interface IConfig {
	// Access control
	whitelistedPhoneNumbers: string[];
	whitelistedEnabled: boolean;
	
	// Gemini AI
	geminiAPIKey: string;
	maxModelTokens: number;
	prePrompt: string | undefined;

	// Prefix
	prefixEnabled: boolean;
	prefixSkippedForMe: boolean;
	gptPrefix: string;
	resetPrefix: string;
	aiConfigPrefix: string;

	// Groupchats
	groupchatsEnabled: boolean;

	// AI Auto responses
	aiAutoResponsesEnabled: boolean;

	// Mass messaging texts
	massMessageText: string;
	massMessageText1: string;
	massMessageText2: string;
	massMessageText3: string;

	// Voice transcription & Text-to-Speech
	speechServerUrl: string;
	ttsEnabled: boolean;
	ttsMode: TTSMode;
	transcriptionEnabled: boolean;
	transcriptionMode: TranscriptionMode;
	transcriptionLanguage: string;
}

// Config
export const config: IConfig = {
	whitelistedPhoneNumbers: process.env.WHITELISTED_PHONE_NUMBERS?.split(",") || [],
	whitelistedEnabled: getEnvBooleanWithDefault("WHITELISTED_ENABLED", false),

	// Gemini
	geminiAPIKey: process.env.GEMINI_API_KEY || "",
	maxModelTokens: getEnvMaxModelTokens(), // Default: 4096
	prePrompt: process.env.PRE_PROMPT, // Default: undefined

	// Prefix
	prefixEnabled: getEnvBooleanWithDefault("PREFIX_ENABLED", true),
	prefixSkippedForMe: getEnvBooleanWithDefault("PREFIX_SKIPPED_FOR_ME", true),
	gptPrefix: process.env.GPT_PREFIX || "!ai",
	resetPrefix: process.env.RESET_PREFIX || "!reset",
	aiConfigPrefix: process.env.AI_CONFIG_PREFIX || "!config",

	// Groupchats
	groupchatsEnabled: getEnvBooleanWithDefault("GROUPCHATS_ENABLED", false),

	// AI Auto responses
	aiAutoResponsesEnabled: getEnvBooleanWithDefault("AI_AUTO_RESPONSES_ENABLED", false),

	// Mass messaging texts - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑ .env —Å –∑–∞–º–µ–Ω–æ–π \n
	massMessageText: processMessageText(process.env.MASS_MESSAGE_TEXT || "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {–ù–∞–∑–≤–∞–Ω–∏–µ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏} üôå\\n\\n–ú—ã ‚Äî —Å—Ç—É–¥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ znstudio.kz.\\n–°–æ–∑–¥–∞—ë–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —É–¥–æ–±–Ω—ã–µ —Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –±–∏–∑–Ω–µ—Å—É –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤.\\n\\n–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ kartofan.online .\\n\\n–ï—Å–ª–∏ –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–¥–µ–ª–∏–º—Å—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏.\\nInstagram: @znstudio.kz"),
	massMessageText1: processMessageText(process.env.MASS_MESSAGE_TEXT_1 || "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {–ù–∞–∑–≤–∞–Ω–∏–µ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏}! üëã\\n\\n–°—Ç—É–¥–∏—è znstudio.kz –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\\n\\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç: kartofan.online\\n\\n–û–±—Å—É–¥–∏–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç? Instagram: @znstudio.kz"),
	massMessageText2: processMessageText(process.env.MASS_MESSAGE_TEXT_2 || "üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è {–ù–∞–∑–≤–∞–Ω–∏–µ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏}!\\n\\n–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –æ—Ç znstudio.kz.\\n\\n–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: kartofan.online\\n\\n–°–≤—è–∂–µ–º—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è? Instagram: @znstudio.kz"),
	massMessageText3: processMessageText(process.env.MASS_MESSAGE_TEXT_3 || "‚ö° {–ù–∞–∑–≤–∞–Ω–∏–µ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏}, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –≤–∞—à –±–∏–∑–Ω–µ—Å!\\n\\n–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –∏ –≤–µ–±-—Ä–µ—à–µ–Ω–∏—è –æ—Ç znstudio.kz.\\n\\n–ù–∞—à–∏ –∫–µ–π—Å—ã: kartofan.online\\n\\n–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è! Instagram: @znstudio.kz"),

	// Speech API
	speechServerUrl: process.env.SPEECH_API_URL || "https://speech-service.verlekar.com",

	// Text-to-Speech
	ttsEnabled: getEnvBooleanWithDefault("TTS_ENABLED", false),
	ttsMode: getEnvTTSMode(),

	// Transcription
	transcriptionEnabled: getEnvBooleanWithDefault("TRANSCRIPTION_ENABLED", false),
	transcriptionMode: getEnvTranscriptionMode(),
	transcriptionLanguage: process.env.TRANSCRIPTION_LANGUAGE || ""
};

function getEnvMaxModelTokens() {
	const envValue = process.env.MAX_MODEL_TOKENS;
	if (envValue == undefined || envValue == "") {
		return 4096;
	}
	return parseInt(envValue);
}

function getEnvBooleanWithDefault(key: string, defaultValue: boolean): boolean {
	const envValue = process.env[key]?.toLowerCase();
	if (envValue == undefined || envValue == "") {
		return defaultValue;
	}
	return envValue == "true";
}

function getEnvTranscriptionMode(): TranscriptionMode {
	const envValue = process.env.TRANSCRIPTION_MODE?.toLowerCase();
	if (envValue == undefined || envValue == "") {
		return TranscriptionMode.Local;
	}
	return envValue as TranscriptionMode;
}

function getEnvTTSMode(): TTSMode {
	const envValue = process.env.TTS_MODE?.toLowerCase();
	if (envValue == undefined || envValue == "") {
		return TTSMode.SpeechAPI;
	}
	return envValue as TTSMode;
}

export default config;