import { Message, Client } from "whatsapp-web.js";
import { startsWithIgnoreCase } from "../utils";

// Config & Constants
import config from "../config";

// CLI
import * as cli from "../cli/ui";

// Gemini handlers
import { handleMessageGemini, handleDeleteConversation } from "../handlers/gemini";

// Mass messaging
import { 
	startMassMessaging, 
	addPhoneNumber, 
	showPhoneNumbers, 
	removePhoneNumber 
} from "../handlers/mass-messaging";

// For deciding to ignore old messages
import { botReadyTimestamp } from "../index";

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç (–¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏)
let whatsappClient: Client;

export const setWhatsAppClient = (client: Client) => {
	whatsappClient = client;
};

// Handles message
async function handleIncomingMessage(message: Message) {
	let messageString = message.body;

	// Prevent handling old messages
	if (message.timestamp != null) {
		const messageTimestamp = new Date(message.timestamp * 1000);

		if (botReadyTimestamp == null) {
			cli.print("Ignoring message because bot is not ready yet: " + messageString);
			return;
		}

		if (messageTimestamp < botReadyTimestamp) {
			cli.print("Ignoring old message: " + messageString);
			return;
		}
	}

	// Ignore groupchats if disabled
	if ((await message.getChat()).isGroup && !config.groupchatsEnabled) return;

	const selfNotedMessage = message.fromMe && message.hasQuotedMsg === false && message.from === message.to;

	// Whitelist check
	if (config.whitelistedEnabled) {
		const whitelistedPhoneNumbers = config.whitelistedPhoneNumbers;

		if (!selfNotedMessage && whitelistedPhoneNumbers.length > 0 && !whitelistedPhoneNumbers.includes(message.from)) {
			cli.print(`Ignoring message from ${message.from} because it is not whitelisted.`);
			return;
		}
	}

	// === –ö–û–ú–ê–ù–î–´ –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò ===
	
	// –°—Ç–∞—Ä—Ç –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (!send)
	if (startsWithIgnoreCase(messageString, "!send")) {
		if (!selfNotedMessage) {
			message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é.");
			return;
		}
		
		const customMessage = messageString.substring(5).trim();
		await startMassMessaging(whatsappClient, message, customMessage || undefined);
		return;
	}

	// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä (!add +1234567890)
	if (startsWithIgnoreCase(messageString, "!add")) {
		if (!selfNotedMessage) {
			message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é.");
			return;
		}
		
		const phoneNumber = messageString.substring(4).trim();
		await addPhoneNumber(message, phoneNumber);
		return;
	}

	// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ (!list)
	if (startsWithIgnoreCase(messageString, "!list")) {
		if (!selfNotedMessage) {
			message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é.");
			return;
		}
		
		await showPhoneNumbers(message);
		return;
	}

	// –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä (!remove +1234567890)
	if (startsWithIgnoreCase(messageString, "!remove")) {
		if (!selfNotedMessage) {
			message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é.");
			return;
		}
		
		const phoneNumber = messageString.substring(7).trim();
		await removePhoneNumber(message, phoneNumber);
		return;
	}

	// –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (!help)
	if (startsWithIgnoreCase(messageString, "!help")) {
		const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üì§ –†–ê–°–°–´–õ–ö–ê:
!send [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
!add +–Ω–æ–º–µ—Ä - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫
!remove +–Ω–æ–º–µ—Ä - –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞  
!list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞

ü§ñ AI:
${config.gptPrefix} —Ç–µ–∫—Å—Ç - –û–±—â–µ–Ω–∏–µ —Å –ò–ò
${config.resetPrefix} - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò:
${config.aiConfigPrefix} - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞

–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:
!send –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –õ–°.
		`;
		message.reply(helpText);
		return;
	}

	// === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

	// Clear conversation context (!reset)
	if (startsWithIgnoreCase(messageString, config.resetPrefix)) {
		await handleDeleteConversation(message);
		return;
	}

	// AI Chat (!ai <prompt>)
	if (startsWithIgnoreCase(messageString, config.gptPrefix)) {
		const prompt = messageString.substring(config.gptPrefix.length + 1);
		if (prompt.trim() === "") {
			message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã " + config.gptPrefix);
			return;
		}
		await handleMessageGemini(message, prompt);
		return;
	}

	// AI –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–±–µ)
	if (!config.prefixEnabled || (config.prefixSkippedForMe && selfNotedMessage)) {
		await handleMessageGemini(message, messageString);
		return;
	}
}

export { handleIncomingMessage };